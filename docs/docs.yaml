---
openapi: '3.0.0'
info:
  description: 'This service control auth'
  title: 'Authorization'
  version: '1.0.0'
paths:
  /api/registration:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpDto'
        description: 'Input data'
        required: true
      description: 'User registration'
      tags:
        - 'Authorization (user)'
      responses:
        201:
          description: 'User authorization data'
          headers:
            Set-Cookie:
              description: >
                Contains the session cookie named `RefreshToken`.
                Pass this cookie back in subsequent requests where it is needed.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthDto'
        400:
          description: 'The request failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        404:
          description: 'Not founded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFounded'
        500:
          description: ' Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /api/login:
    post:
      requestBody:
        $ref: '#/components/requestBodies/SignInDto'
      description: 'User authorization'
      tags:
        - 'Authorization (user)'
      responses:
        201:
          description: 'User authorization data'
          headers:
            Set-Cookie:
              description: >
                Contains the session cookie named `RefreshToken`.
                Pass this cookie back in subsequent requests where it is needed.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthDto'
        400:
          description: 'The request failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        404:
          description: 'Not founded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFounded'
        500:
          description: ' Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /api/logout:
    get:
      security:
        - JWT: []
        - SecurityAuth: []
      tags:
        - 'Authorization (user)'
      responses:
        201:
          description: >
            The session refresh token has been removed from cookie named `RefreshToken`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'

        400:
          description: 'The request failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        404:
          description: 'Not founded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFounded'
        500:
          description: ' Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /api/refresh:
    post:
      security:
        - SecurityAuth: []
      description: 'Get refreshToken'
      tags:
        - 'Authorization (user)'
      responses:
        201:
          description: >
            The new session refresh token is returned in a cookie named `RefreshToken`. You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              description: >
                Contains the session cookie named `RefreshToken`.
                Pass this cookie back in subsequent requests where it is needed.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthDto'
        400:
          description: 'The request failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        404:
          description: 'Not founded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFounded'
        500:
          description: ' Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /api/account/{id}/edit:
    put:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
            minimum: 1
          description: The user `id` from edit
      security:
        - SecurityAuth: []
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserDto'
        description: 'Input data'
        required: true
      description: 'Change user data'
      tags:
        - 'Change data (user)'
      responses:
        200:
          description: 'New user data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        400:
          description: 'The request failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        404:
          description: 'Not founded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFounded'
        500:
          description: ' Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
tags:
  - name: 'Authorization (user)'
    description: 'Functions for user authorization'
  - name: 'Change data (user)'
    description: 'Functions for change user data'
servers:
  - url: 'http://localhost:5000'
  - url: 'https://localhost:5000'
components:
  requestBodies:
    SignInDto:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignInDto'
      description: 'Input data'
      required: true
    LogoutDto:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LogoutDto'
      description: 'Input data'
      required: true
  securitySchemes:
    SecurityAuth:
      type: 'apiKey'
      in: 'cookie'
      name: 'refreshToken'
      description: ' token'
    JWT:
      type: 'apiKey'
      in: 'header'
      name: 'Authorization'
      description: 'Access token'

  schemas:
    AuthDto:
      required:
        - 'accessToken'
        - 'refreshToken'
        - 'user'
      properties:
        accessToken:
          type: 'string'
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaXJzdE5hbWUiOiJJZ29yIiwibGFzdE5hbWUiOiJBbGFmaW5vdmeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaXJzdE5hbWUiOiJJZ29yIiwibGFzdE5hbW'
          description: ''
        refresh_token:
          type: 'string'
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaXJzdE5hbWUiOiJJZ29yIiwibGFzdE5hbWUiOiJBbGFmaW5vdmZzZmFzZGFmIiwiZW1haWwiOiJpZ29zNTMyMDA2QGdtYWlsLmNvbSIsImNpdHkiOiJNb3Njb3ciL'
          description: ''
        user:
          $ref: '#/components/schemas/UserDto'
    SignInDto:
      required:
        - 'email'
        - 'password'
      properties:
        email:
          type: 'string'
          example: 'textmail@gmail.com'
          minLength: 6
          maxLength: 50
          pattern: '^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
          description: ''
        password:
          type: 'string'
          example: 'hwp234klasdf'
          minLength: 6
          maxLength: 50
          description: ''
    SignUpDto:
      required:
        - 'firstName'
        - 'lastName'
        - 'city'
        - 'email'
        - 'password'
      properties:
        firstName:
          type: 'string'
          example: 'Misha'
          pattern: '^[A-Za-z]*$'
          minLength: 2
          maxLength: 50
          description: ''
        lastName:
          type: 'string'
          example: 'Ivanov'
          pattern: '^[A-Za-z]*$'
          minLength: 2
          maxLength: 50
          description: ''
        city:
          type: 'string'
          example: 'Bangkok'
          pattern: '^[A-Za-z]*$'
          minLength: 2
          maxLength: 50
          description: ''
        email:
          type: 'string'
          example: 'testmail@gmail.com'
          minLength: 6
          maxLength: 50
          pattern: '^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
          description: ''
        password:
          minLength: 6
          maxLength: 50
          type: 'string'
          example: 'hwp234klasdf'
          description: ''

    SuccessDto:
      required:
        - 'success'
      properties:
        success:
          type: 'boolean'
          description: ''
    BadRequest:
      required:
        - 'message'
        - 'errors'
      properties:
        message:
          type: 'string'
          maxLength: 50
          example: 'Bad request'
          description: 'Bad request(400)'
        errors:
          type: 'array'
          items:
            $ref: '#/components/schemas/FieldError'
    Unauthorized:
      required:
        - 'message'
      properties:
        message:
          type: 'string'
          maxLength: 50
          example: 'User not authorized'
          description: 'Unauthorized(401)'
    NotFounded:
      required:
        - 'message'
        - 'errors'
      properties:
        message:
          type: 'string'
          maxLength: 50
          example: 'NotFounded'
          description: 'NotFounded(404)'
        errors:
          type: 'array'
          items:
            $ref: '#/components/schemas/FieldError'
    InternalError:
      required:
        - 'message'
        - 'errors'
      properties:
        message:
          type: 'string'
          maxLength: 50
          example: 'InternalError'
          description: 'InternalError(500)'
        errors:
          type: 'array'
          items:
            $ref: '#/components/schemas/FieldError'
    FieldError:
      required:
        - 'msg'
        - 'path'
        - 'location'
        - 'type'
      properties:
        type:
          type: 'string'
          maxLength: 50
          example: 'field'
          description: ''
        msg:
          type: 'string'
          maxLength: 50
          example: 'Something Error'
          description: ''
        path:
          type: 'string'
          maxLength: 50
          example: 'http://localhost:5000/api/app.js'
          description: ''
        location:
          type: 'string'
          maxLength: 50
          example: body
          description: ''
    UserDto:
      required:
        - 'firstName'
        - 'lastName'
        - 'email'
        - 'city'
        - 'id'
      properties:
        id:
          type: 'number'
          minimum: 1
          example: 1
          description: ''
        firstName:
          type: 'string'
          minLength: 2
          maxLength: 50
          pattern: '^[A-Za-z]*$'
          example: 'Misha'
          description: ''
        lastName:
          type: 'string'
          example: 'Ivanov'
          minLength: 2
          maxLength: 50
          pattern: '^[A-Za-z]*$'
          description: ''
        email:
          type: 'string'
          example: 'textmail@gmail.com'
          minLength: 6
          maxLength: 50
          pattern: '^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
          description: ''
        city:
          type: 'string'
          minLength: 2
          maxLength: 50
          pattern: '^[A-Za-z]*$'
          example: 'Bangkok'
          description: ''
    EditDto:
      required:
        - 'firstName'
        - 'lastName'
        - 'email'
        - 'password'
        - 'newPass'
        - 'city'
      properties:
        firstName:
          type: 'string'
          minLength: 2
          maxLength: 50
          pattern: '^[A-Za-z]*$'
          example: 'Misha'
          description: ''
        lastName:
          type: 'string'
          example: 'Ivanov'
          minLength: 2
          maxLength: 50
          pattern: '^[A-Za-z]*$'
          description: ''
        email:
          type: 'string'
          example: 'textmail@gmail.com'
          minLength: 6
          maxLength: 50
          pattern: '^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
          description: ''
        pasword:
          type: 'stirng'
          example: 'qwerJbo2'
          minLength: 6
          description: ''
        newPass:
          type: 'string'
          example: 'new-pass2342'
          minLength: 6
          description: ''
        city:
          type: 'string'
          minLength: 2
          maxLength: 50
          pattern: '^[A-Za-z]*$'
          example: 'Bangkok'
          description: ''
    EditUserDto:
      required:
        - 'user'
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
